import Head from 'next/head'
import { FaSearch } from "react-icons/fa"
import { useEffect, useState } from 'react'
import Track from '../components/Track'
import Categories from '../components/Categories'
import { REACT_APP_CLIENT_ID, REACT_APP_CLIENT_SECRET } from '../lib/spotify'
import Loading from '../components/loading'

import styles from '../styles/Home.module.css'


export default function Redirect() {

  const [searchTerm, setSearchTerm] = useState('')
  const [artistsList, setArtistsList] = useState([])
  const [albumList, setAlbumList] = useState([])
  const [playlistList, setPlaylistList] = useState([])
  const [showArtist, setShowArtist] = useState(true)
  const [showAlbum, setShowAlbum] = useState(false)
  const [showPlaylist, setShowPlaylist] = useState(false)
  const [buttonV, setButtonV] = useState(false)
  const [token, setToken] = useState('')
  const [featured, setFeatured] = useState([])
  const [showFeatured, setShowFeatured] = useState(true)
  const [removeLoading, setRemoveLoading] = useState(false)
  const [removeContent, setRemoveContent] =  useState(false)

  useEffect(async ()  => {

    const response = await fetch('https://accounts.spotify.com/api/token', {
      method: 'POST',
      headers: {
        'Content-Type' : 'application/x-www-form-urlencoded',
        'Authorization' : 'Basic ' + btoa(REACT_APP_CLIENT_ID + ':' + REACT_APP_CLIENT_SECRET)
      },
      body: 'grant_type=client_credentials'
    })
    const data = await response.json()
    setToken(data.access_token)

    const resp = await fetch('https://api.spotify.com/v1/browse/categories?country=BR&locale=sp_BR', {
      headers: {
        Authorization: `Bearer ${data.access_token}`
      }
    })
    const json = await resp.json()
    console.log(json)
    setFeatured(json.categories.items)
    setRemoveLoading(true)
  }, [])
  
  const handleOnKeyDown = (e) => {
    if (e.key === 13 || e.key === 'Enter') {
      handleSearch()
    }
  }

  const handleSearch = () => {
    setShowFeatured(false)
    setRemoveLoading(false)
    setRemoveContent(true)
    setTimeout(async() => {
      if (searchTerm !== null && searchTerm !== undefined && searchTerm !== '' && searchTerm.length !== 0) {
        setButtonV(true)
        
        const response = await fetch(`https://api.spotify.com/v1/search?query=${searchTerm}&type=album,playlist,artist&?country=BR&locale=sp_BR`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
        const json = await response.json()
        setArtistsList(json.artists.items)
        setAlbumList(json.albums.items)
        setPlaylistList(json.playlists.items)
        
      } else {
        console.log('Error')
      }
      setRemoveLoading(true)
      setRemoveContent(false)
    }, 1500)
    
  }

  const hadleShowArtist = () => {
    if (showArtist === true) {
      setShowArtist(false)
    } else {
      setShowArtist(true)
      setShowPlaylist(false)
      setShowAlbum(false)
    }
  }
  const hadleShowAlbum = () => {
    if (showAlbum === true) {
      setShowAlbum(false)
    } else {
      setShowAlbum(true)
      setShowArtist(false)
      setShowPlaylist(false)
    }
  }
  const hadleShowPlaylist = () => {
    if (showPlaylist === true) {
      setShowPlaylist(false)
    } else {
      setShowPlaylist(true)
      setShowArtist(false)
      setShowAlbum(false)
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Music Finder</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1 className={styles.title}>
          <a href="/"><strong>Music Finder</strong></a>
        </h1>
        <div className={styles.input_container}>
          <input type="text" placeholder="Artistas, álbuns ou playlists" onChange={e=> setSearchTerm(e.target.value)} value={searchTerm} onKeyDown={handleOnKeyDown} required/>
          <button onClick={handleSearch}><FaSearch /></button>
        </div>
      </header>
      <main className={styles.main}>
        {!removeLoading && <Loading/>}
        {removeContent !== true ? (
          <>
            {buttonV === true ? (
            <div className={styles.button_container}>
              <button onClick={hadleShowArtist} className={styles.button}>Artistas</button>
              <button onClick={hadleShowAlbum} className={styles.button}>Álbuns</button>
              <button onClick={hadleShowPlaylist} className={styles.button}>Playlists</button>
            </div>
          ): null}
          
          {showFeatured === true ? (
              <div className={styles.track_container} >
                {featured.map(categories=> <Categories categories={categories} key={categories.id}/>)}
              </div>
          ): null}
          
          {showArtist === true ? (
            <div className={styles.track_container} >
              {artistsList.map(artist=> <Track track={artist} key={artist.id}/>)}
            </div>
          ): null}
          
          {showAlbum === true ? (
          <div className={styles.track_container}>
            {albumList.map(album=> <Track track={album} key={album.id}/>)}
          </div>
          ): null}

          {showPlaylist === true ? (
          <div className={styles.track_container}>
            {playlistList.map(playlist=> <Track track={playlist} key={playlist.id}/>)}
          </div>
          ): null}
          </>
        ) : null}
        </main>
        </div>
)}
